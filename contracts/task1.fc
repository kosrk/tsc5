#include "imports/stdlib.fc";

;; storage
;; public_key: uint256
;; seqno: uint32
;; execution_time: uint32
;; receiver: MsgAddressInt

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}


() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg.load_ref().begin_parse();
  ;; var (subwallet_id, valid_until, msg_seqno) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
  ;; throw_if(35, valid_until <= now());
  ;; var ds = get_data().begin_parse();
  ;; var (stored_seqno, stored_subwallet, public_key) = (ds~load_uint(32), ds~load_uint(32), ds~load_uint(256));
  ;; ds.end_parse();
  throw_unless(119, msg_seqno == stored_seqno);
  ;; throw_unless(34, subwallet_id == stored_subwallet);
  ;; throw_unless(35, check_signature(slice_hash(in_msg), signature, public_key));
  ;; accept_message();
  ;; cs~touch();
  ;; while (cs.slice_refs()) {
  ;;   var mode = cs~load_uint(8);
  ;;   send_raw_message(cs~load_ref(), mode);
  ;; }
  ;; set_data(begin_cell()
  ;;   .store_uint(stored_seqno + 1, 32)
  ;;   .store_uint(stored_subwallet, 32)
  ;;   .store_uint(public_key, 256)
  ;;   .end_cell());
}

;; Get methods

int get_seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int get_execution_time() method_id {
  var cs = get_data().begin_parse();
  cs~load_uint(64);
  return cs.preload_uint(256);
}
