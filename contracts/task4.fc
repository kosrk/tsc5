#include "imports/stdlib.fc";

forall X -> tuple ut(X x) asm "NOP";
(int) tlen (tuple t) asm "TLEN";
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple, ()) tset(tuple t, int idx, X x) asm(t x idx) "SETINDEXVAR";
forall X -> (tuple, X) ~tpop(tuple t) asm "TPOP";

const int x = 88; ;; X
const int d = 46; ;; .
const int q = 63; ;; ?
const int s = 83; ;; S
const int e = 69; ;; E
const int p = 33; ;; !

const int step_w = 1;
const int prob_w = 1000;
const int wall_w = 1000000;
const int max_w = 1000000000;

global int g_n; ;; 1 GETGLOB
global int g_m; ;; 2 GETGLOB
global tuple g_maze;
global tuple lmap;
global tuple d_queue;
global tuple p_queue;
global tuple w_queue;
global int end;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    return();
}

tuple gen_zero_tup() asm
                                                ;;
        " 2 GETGLOB "                           ;; m
        " REPEAT:<{ "                           ;;
        "   TRUE"                               ;; -1
        " }>"                                   ;; -1xM
        " 2 GETGLOB "                           ;; -1xM m
        " TUPLEVAR "                            ;; mtup
        " 1 GETGLOB DEC"                        ;; mtup n-1
        " REPEAT:<{ "                           ;; mtup
        "   DUP "                               ;; mtup mtup
        " }> "                                  ;; mtupxN
        " 1 GETGLOB "                           ;; mtupxN n
        " TUPLEVAR "                            ;; nmtup
        ;

tuple write_at(tuple in_tup, int in_i, int in_j, int val) inline {
    var row = in_tup.at(in_i);
    row~tset(in_j, val);
    in_tup~tset(in_i, row);
    return in_tup;
}

(int, int, int) get_path(int old_i, int old_j, int i, int j, int old_w) inline {
    if (i >= 0) & (i < g_n) & (j >= 0) & (j < g_m) {
        var new_w = lmap.at(i).at(j);
        if (new_w < old_w) & (new_w != -1)  {
            return (i, j, new_w);
        }
    }
    return (old_i, old_j, old_w);
}

() check_for(int i, int j, int w) impure inline {
    if (i >= 0) & (i < g_n) & (j >= 0) & (j < g_m) {
        var symb = g_maze.at(i).at(j);
        if symb == d {
            if lmap.at(i).at(j) == -1 {
                d_queue~push_back(ut([i, j, w])); ;; dot cells must be extracted first
                lmap = lmap.write_at(i, j, w);
            }
            return ();
        }
        if symb == q {
            var new_w = w + prob_w;
            if lmap.at(i).at(j) == -1 {
                p_queue~push_back(ut([i, j, new_w])); ;; dot cells must be extracted first
                lmap = lmap.write_at(i, j, new_w);
            }
            return ();
        }
        if symb == e {
            end = -1;
            return ();
        }
        if symb == x {
            var new_w = w + wall_w;
            if lmap.at(i).at(j) == -1 {
                w_queue~push_back(ut([i, j, new_w])); ;; dot cells must be extracted first
                lmap = lmap.write_at(i, j, new_w);
            }
            return ();
        }
    }
    return ();
}

(tuple) step_forward(tuple queue, tuple batch) inline {

    var d_queue = null();
    var p_queue = null();
    var w_queue = null();
    end = 0;

    while (~ batch.is_null()) {
        var cur = batch~pop_back();
        var cur_i = cur.at(0);
        var cur_j = cur.at(1);
        var w = lmap.at(cur_i).at(cur_j) + step_w;
        check_for(cur_i, cur_j - 1, w);
        check_for(cur_i + 1, cur_j, w);
        check_for(cur_i, cur_j + 1, w);
        check_for(cur_i - 1, cur_j, w);
        check_for(cur_i + 1, cur_j + 1, w);
        check_for(cur_i + 1, cur_j - 1, w);
        check_for(cur_i - 1, cur_j + 1, w);
        check_for(cur_i - 1, cur_j - 1, w);
    }

    tuple dq = empty_tuple();
    tuple pq = empty_tuple();
    tuple wq = empty_tuple();

    if ~ d_queue.is_null() {
        dq~tpush(d_queue);
    }
    var i = 0;
    repeat queue.at(0).tlen() {
        dq~tpush(queue.at(0).at(i));
        i = i + 1;
    }

    if ~ p_queue.is_null() {
        pq~tpush(p_queue);
    }
    var i = 0;
    repeat queue.at(1).tlen() {
        pq~tpush(queue.at(1).at(i));
        i = i + 1;
    }

    if ~ w_queue.is_null() {
        wq~tpush(w_queue);
    }
    var i = 0;
    repeat queue.at(2).tlen() {
        wq~tpush(queue.at(2).at(i));
        i = i + 1;
    }

    queue = ut([dq, pq, wq]);

    return queue;
}

tuple forward(int end_i, int end_j, tuple queue) impure inline {
;;     queue~dump();

    if tlen(queue.at(0)) > 0 {
        var row = queue.at(0);
        var batch = row~tpop();
        queue~tset(0, row);
        queue = step_forward(queue, batch);
        return queue;
    }

    if tlen(queue.at(1)) > 0 {
        var row = queue.at(1);
        var batch = row~tpop();
        queue~tset(1, row);
        queue = step_forward(queue, batch);
        return queue;
    }

    if tlen(queue.at(2)) > 0 {
        var row = queue.at(2);
        var batch = row~tpop();
        queue~tset(2, row);
        queue = step_forward(queue, batch);
        return queue;
    }

    end = -1;
    return queue;
}

(int, int, int) back(int i, int j) inline {

    var best_w = max_w;
    var best_i = i;
    var best_j = j;

    (best_i, best_j, best_w) = get_path(best_i, best_j, i + 1, j + 1, best_w);
    (best_i, best_j, best_w) = get_path(best_i, best_j, i + 1, j - 1, best_w);
    (best_i, best_j, best_w) = get_path(best_i, best_j, i - 1, j + 1, best_w);
    (best_i, best_j, best_w) = get_path(best_i, best_j, i - 1, j - 1, best_w);
    (best_i, best_j, best_w) = get_path(best_i, best_j, i - 1, j, best_w);
    (best_i, best_j, best_w) = get_path(best_i, best_j, i, j + 1, best_w);
    (best_i, best_j, best_w) = get_path(best_i, best_j, i + 1, j, best_w);
    (best_i, best_j, best_w) = get_path(best_i, best_j, i, j - 1, best_w);
    return(best_i, best_j, best_w);
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {

    set_gas_limit(100000000);

    g_n = n;
    g_m = m;
    g_maze = maze;

    tuple lmap_init = gen_zero_tup();

    ;; INIT
    var start_i = 0;
    var start_j = 0;
    var end_i = 0;
    var end_j = 0;

    ;; FILL LMAP, START, END POINTS
    var i = 0;
    repeat (n) {
        var j = 0;
        var row = empty_tuple();
        repeat (m) {
            var item = maze.at(i).at(j);
            if maze.at(i).at(j) == s {
                start_i = i;
                start_j = j;
                lmap_init = lmap_init.write_at(i, j, 0);

            }
            if maze.at(i).at(j) == e {
                end_i = i;
                end_j = j;
            }
            j = j + 1;
        }
        i = i + 1;
    }

    if (abs(start_i - end_i) < 2) & (abs(start_j - end_j) < 2) { ;; check for zero path
        return (0, 0, 1, maze);
    }

    lmap = lmap_init;

    tuple init_batch = null();
    init_batch~push_back(ut([start_i, start_j, 0]));

    tuple queue = ut([
            ut([init_batch]),              ;; dot queue
            empty_tuple(),                 ;; prob queue
            empty_tuple()                  ;; wall queue
    ]);

    ;; Forward trace
    end = 0;
    do {
        queue = forward(end_i, end_j, queue);
    } until (end == -1);

    ;; Back trace
    var cur_i = end_i;
    var cur_j = end_j;
    lmap = lmap.write_at(end_i, end_j, max_w);

    (cur_i, cur_j, int w) = back(end_i, end_j);

    var walls = w / wall_w;
    var prob = (w - walls * wall_w) / prob_w;
    var path = w - walls * wall_w - prob * prob_w + 1;

    var row = maze.at(cur_i);
    row~tset(cur_j, p);
    maze~tset(cur_i, row);

    repeat (1000) {
        (cur_i, cur_j, int cur_w) = back(cur_i, cur_j);
        if cur_w == 0 {
            return (walls, prob, path, maze);
        }
        var row = maze.at(cur_i);
        row~tset(cur_j, p);
        maze~tset(cur_i, row);
    };

    return (-1, 0, 0, null());
}
