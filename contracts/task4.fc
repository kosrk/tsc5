#include "imports/stdlib.fc";

forall X -> tuple ut(X x) asm "NOP";
(int) tlen (tuple t) asm "TLEN";
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

const int x = 88; ;; X
const int d = 46; ;; .
const int q = 63; ;; ?
const int s = 83; ;; S
const int e = 69; ;; E
const int p = 33; ;; !

const int step_w = 1;
const int prob_w = 1000;
const int wall_w = 1000000;
const int max_w = 1000000000;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    return();
}

tuple sort_by_prob(tuple stack) inline {
    ;;     if (~ stack.is_null()) {
    ;;         stack~dump();
    ;;     }
    var temp = null();
    var last = ut([0, 0, max_w]);
    while (~ stack.is_null()) {
        var cur = stack~pop_back();
        while (~ temp.is_null()) & (last.at(2) < cur.at(2)) {
            stack~push_back(temp~pop_back());
        }
        temp~push_back(cur);
        last = cur;
    }
    ;;     if (~ temp.is_null()) {
    ;;     temp~dump();
    ;;     }
    return temp;
}

tuple write_at(tuple in_tup, int n, int m, int in_i, int in_j, int val) inline {
    var i = 0;
    var j = 0;
    var res = empty_tuple();
    repeat (n) {
        var row = empty_tuple();
        repeat (m) {
            if (i == in_i) & (j == in_j) {
                row~tpush(val);
            } else {
                row~tpush(in_tup.at(i).at(j));
            }
            j = j + 1;
        }
        j = 0;
        i = i + 1;
        res~tpush(row);
    }
    return res;
}

tuple write_path_symbol(tuple in_tup, int n, int m, int in_i, int in_j) inline {
    var i = 0;
    var j = 0;
    var res = empty_tuple();
    repeat (n) {
        var row = empty_tuple();
        repeat (m) {
            if (i == in_i) & (j == in_j) {
                row~tpush(p);
            } else {
                row~tpush(in_tup.at(i).at(j));
            }
            j = j + 1;
        }
        j = 0;
        i = i + 1;
        res~tpush(row);
    }
    return res;
}

(int, int, int) get_path(tuple lmap, int n, int m, int old_i, int old_j, int i, int j, int old_w) inline {
    if (i >= 0) & (i < n) & (j >= 0) & (j < m) {
        var new_w = lmap.at(i).at(j);
        if (new_w < old_w) & (new_w != -1)  {
            return (i, j, new_w);
        }
    }
    return (old_i, old_j, old_w);
}

(tuple, tuple, tuple, tuple, int) check_for(tuple maze, tuple lmap, tuple wall_queue, tuple prob_queue, tuple dot_queue, int m, int n, int i, int j, int w, int end) inline {
    if (i >= 0) & (i < n) & (j >= 0) & (j < m) {
        var symb = maze.at(i).at(j);
        if symb == e {
            return (lmap, wall_queue, prob_queue, dot_queue, -1);
        }
        if symb == d {
            if lmap.at(i).at(j) == -1 {
                dot_queue~push_back(ut([i, j, w])); ;; dot cells must be extracted first
                lmap = lmap.write_at(n, m, i, j, w);
            }
        }
        if symb == q {
            var new_w = w + prob_w;
            if lmap.at(i).at(j) == -1 {
                prob_queue~push_back(ut([i, j, new_w])); ;; dot cells must be extracted first
                lmap = lmap.write_at(n, m, i, j, new_w);
            }
        }
        if symb == x {
            var new_w = w + wall_w;
            if lmap.at(i).at(j) == -1 {
;;                 new_w~dump();
                wall_queue~push_back(ut([i, j, new_w])); ;; dot cells must be extracted first
                lmap = lmap.write_at(n, m, i, j, new_w);
            }
        }
    }
    return (lmap, wall_queue, prob_queue, dot_queue, end);
}

(tuple, tuple, tuple, tuple, int) step_forward(tuple maze, tuple lmap, tuple wall_queue, tuple prob_queue, tuple dot_queue, int m, int n, tuple cur) inline {
    var cur_i = cur.at(0);
    var cur_j = cur.at(1);
    var end = 0;
    var w = lmap.at(cur_i).at(cur_j) + step_w;
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i, cur_j - 1, w, end);
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i + 1, cur_j, w, end);
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i, cur_j + 1, w, end);
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i - 1, cur_j, w, end);
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i + 1, cur_j + 1, w, end);
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i + 1, cur_j - 1, w, end);
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i - 1, cur_j + 1, w, end);
    (lmap, wall_queue, prob_queue, dot_queue, end) = check_for(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur_i - 1, cur_j - 1, w, end);
    return (lmap, wall_queue, prob_queue, dot_queue, end);
}

tuple forward(int n, int m, int end_i, int end_j, tuple dot_queue, tuple maze, tuple lmap) inline {
    tuple prob_queue = null();
    tuple wall_queue = null();
    int end = 0;
    do {
        do {
            while (~ dot_queue.is_null()) {
                var cur = dot_queue~pop_back();
                (lmap, wall_queue, prob_queue, dot_queue, end) = step_forward(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur);
;;                 lmap~dump();
;;                     dot_queue~dump();
                dot_queue = sort_by_prob(dot_queue);
                prob_queue = sort_by_prob(prob_queue);
                wall_queue = sort_by_prob(wall_queue);

            }
            if (end == -1) {
                return lmap;
            }
            if ~ prob_queue.is_null() {
                var cur = prob_queue~pop_back();
                (lmap, wall_queue, prob_queue, dot_queue, end) = step_forward(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur);
                dot_queue = sort_by_prob(dot_queue);
                prob_queue = sort_by_prob(prob_queue);
                wall_queue = sort_by_prob(wall_queue);
            }
        } until (prob_queue.is_null() & dot_queue.is_null());
        if (end == -1) {
            return lmap;
        }
        if ~ wall_queue.is_null() {
            var cur = wall_queue~pop_back();
            (lmap, wall_queue, prob_queue, dot_queue, end) = step_forward(maze, lmap, wall_queue, prob_queue, dot_queue, m, n, cur);
            dot_queue = sort_by_prob(dot_queue);
            prob_queue = sort_by_prob(prob_queue);
            wall_queue = sort_by_prob(wall_queue);
        }
    } until (prob_queue.is_null() & dot_queue.is_null() & wall_queue.is_null());

    return lmap;
}

(int, int, int) back(tuple l_map, int n, int m, int i, int j) inline {

    var best_w = max_w;
    var best_i = i;
    var best_j = j;

    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i + 1, j + 1, best_w);
    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i + 1, j - 1, best_w);
    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i - 1, j + 1, best_w);
    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i - 1, j - 1, best_w);
    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i - 1, j, best_w);
    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i, j + 1, best_w);
    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i + 1, j, best_w);
    (best_i, best_j, best_w) = get_path(l_map, n, m, best_i, best_j, i, j - 1, best_w);
;;     best_w~dump();
    return(best_i, best_j, best_w);
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {

    set_gas_limit(100000000);
    ;;     throw_if(100, (n < 2) | (m < 2) | (n > 8) | (m > 8));
    ;;     if ((n < 2) | (m < 2) | (n > 8) | (m > 8)) {
    ;;         return (-1, 0, 0, null());
    ;;     }

    ;; INIT
    var l_map = empty_tuple();
    var start_i = 0;
    var start_j = 0;
    var end_i = 0;
    var end_j = 0;

    ;; FILL LMAP, START, END POINTS
    var i = 0;
    repeat (n) {
        var j = 0;
        var row = empty_tuple();
        repeat (m) {
            var item = maze.at(i).at(j);
            if maze.at(i).at(j) == s {
                start_i = i;
                start_j = j;
                row~tpush(0);
            } else {
                row~tpush(-1);
            }
            if maze.at(i).at(j) == e {
                end_i = i;
                end_j = j;
            }
            j = j + 1;
        }
        l_map~tpush(row);
        i = i + 1;
    }

    if (abs(start_i - end_i) < 2) & (abs(start_j - end_j) < 2) { ;; check for zero path
        return (0, 0, 1, maze);
    }

    tuple init_queue = null();
    init_queue~push_back(ut([start_i, start_j, 0]));

    ;; Forward trace
    l_map = forward(n, m, end_i, end_j, init_queue, maze, l_map);
;;     l_map~dump();

    ;; Back trace
    var cur_i = end_i;
    var cur_j = end_j;
    l_map = l_map.write_at(n, m, end_i, end_j, max_w);

    (cur_i, cur_j, int w) = back(l_map, n, m, end_i, end_j);

    var walls = w / wall_w;
    var prob = (w - walls * wall_w) / prob_w;
    var path = w - walls * wall_w - prob * prob_w;

    var solved_maze = maze;
    solved_maze = write_path_symbol(solved_maze, n, m, cur_i, cur_j);

    repeat (1000) {
        (cur_i, cur_j, int cur_w) = back(l_map, n, m, cur_i, cur_j);
;;         cur_w~dump();
        if cur_w == 0 {
            return (walls, prob, path, solved_maze); ;; TODO: fix
        }
        solved_maze = write_path_symbol(solved_maze, n, m, cur_i, cur_j);
    };

    return (-1, 0, 0, null());
}
